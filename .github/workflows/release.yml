name: Release

on:
  push: 
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  prerelease:
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.prerelease.outputs.value }}
    steps:
      - name: Prerelease Check
        id: prerelease
        run: |
          if [[ ${{ github.ref_name }} =~ ^v?[0-9]+[.][0-9]+[.][0-9]+$ ]]; then
              echo value=false >> $GITHUB_OUTPUT
          else
              echo value=true >> $GITHUB_OUTPUT
          fi
  package:
    strategy:
      matrix:
        job:
        - target: aarch64-apple-darwin
          os: macos-latest
        - target: aarch64-unknown-linux-musl
          os: ubuntu-latest
          target_rustflags: '--codegen linker=aarch64-linux-gnu-gcc'
        - target: aarch64-pc-windows-msvc
          os: windows-latest
        - target: x86_64-apple-darwin
          os: macos-latest
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          target_rustflags: -C target-feature=+crt-static
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
    
    runs-on: "${{ matrix.job.os }}"
    
    needs:
      - prerelease
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install AArch64 Toolchain
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-i386

      - name: Install Musl Tools
        if: ${{ contains(matrix.job.target, '-unknown-linux-musl') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
      - name: Package
        id: package
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          TARGET=${{ matrix.job.target }}
          DIST=`pwd`/dist
          EXECUTABLE=target/$TARGET/release/crtcli
          
          if [[ ${{ matrix.job.os }} == windows-latest ]]; then
            EXECUTABLE=$EXECUTABLE.exe
          fi
          
          echo "Packaging $VERSION for $TARGET..."
          
          test -f Cargo.lock || cargo generate-lockfile
  
          echo "Installing rust toolchain for $TARGET..."
          
          rustup target add $TARGET
          
          if [[ $TARGET == aarch64-unknown-linux-musl ]]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          
          echo "Building..."
          
          RUSTFLAGS="--codegen target-feature=+crt-static ${{ matrix.job.target_rustflags }}" \
            cargo build --bin crtcli --target $TARGET --release
          
          mkdir $DIST
          
          cp -r \
            $EXECUTABLE \
            LICENSE \
            README.md \
            CHANGELOG.md \
            $DIST
          
          cd $DIST
          echo "Creating release archive..."
          case ${{ matrix.job.os }} in
            ubuntu-latest | macos-latest)
              ARCHIVE=crtcli-$VERSION-$TARGET.tar.gz
              tar czf $ARCHIVE *
              echo "archive=$DIST/$ARCHIVE" >> $GITHUB_OUTPUT
              ;;
            windows-latest)
              ARCHIVE=crtcli-$VERSION-$TARGET.zip
              7z a $ARCHIVE *
              echo "archive=`pwd -W`/$ARCHIVE" >> $GITHUB_OUTPUT
              ;;
          esac
        
      - name: Publish Release Archive
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          draft: false
          files: ${{ steps.package.outputs.archive }}
          prerelease: ${{ needs.prerelease.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish Changelog
        uses: softprops/action-gh-release@v2
        if: >-
          ${{
            startsWith(github.ref, 'refs/tags/')
            && matrix.job.target == 'x86_64-unknown-linux-musl'
          }}
        with:
          draft: false
          files: CHANGELOG.md
          prerelease: ${{ needs.prerelease.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  checksum:
    runs-on: ubuntu-latest
    
    needs:
      - prerelease
      - package
    
    steps:
      - name: Download Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download \
            --repo heabijay/crtcli \
            --pattern '*' \
            --dir release \
            ${{ github.ref_name }}

      - name: Create Checksums
        run: |
          cd release
          shasum -a 256 * > ../SHA256SUMS

      - name: Publish Checksums
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          files: SHA256SUMS
          prerelease: ${{ needs.prerelease.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
